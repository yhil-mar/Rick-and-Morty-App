{"ast":null,"code":"const regexEmail = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\nconst validation = (userData, errors, setErrors) => {\n  if (!userData.email) setErrors({\n    ...errors,\n    email: 'Debes llenar este campo'\n  });else if (userData.email.length > 35) setErrors({\n    ...errors,\n    email: 'No puede superar los 35 caracteres'\n  });else if (!regexEmail.test(userData.email)) setErrors({\n    ...errors,\n    email: 'Email incorrecto'\n  });else setErrors({\n    ...errors,\n    email: ''\n  });\n};\nif (!userData.password) setErrors({\n  ...errors,\n  password: 'Password incorrecta'\n});else {\n  if (userData.password.length < 6 || userData.password.length > 10) setErrors({\n    ...errors,\n    password: 'Password incorrecta'\n  });else {\n    let validar = 0;\n    let arr = userData.password.split('');\n    arr.forEach(char => {\n      if (!isNaN(Number(char))) validar++;\n    });\n    if (validar < 1) setErrors({\n      ...errors,\n      password: 'Debe tener al menos un número'\n    });else setErrors({\n      ...errors,\n      password: ''\n    });\n  }\n}\nexport default validation;","map":{"version":3,"names":["regexEmail","validation","userData","errors","setErrors","email","length","test","password","validar","arr","split","forEach","char","isNaN","Number"],"sources":["C:/Users/Y.A.S.C/OneDrive/Programación/INICIO-FULL/PI/rick_and_morty/src/validation.js"],"sourcesContent":["const regexEmail = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i;\r\n\r\nconst validation = (userData, errors, setErrors) => {\r\n    if (!userData.email) setErrors({ ...errors, email: 'Debes llenar este campo' });\r\n    else if (userData.email.length > 35) setErrors({ ...errors, email: 'No puede superar los 35 caracteres' })\r\n    else if (!regexEmail.test(userData.email)) setErrors({ ...errors, email: 'Email incorrecto' });\r\n    else setErrors({ ...errors, email: '' });\r\n}\r\n\r\nif (!userData.password) setErrors({ ...errors, password: 'Password incorrecta' });\r\nelse {\r\n    if (userData.password.length < 6 || userData.password.length > 10) setErrors({ ...errors, password: 'Password incorrecta' });\r\n    else {\r\n        let validar = 0;\r\n        let arr = userData.password.split('')\r\n        arr.forEach(char => {\r\n            if (!isNaN(Number(char))) validar++;\r\n        });\r\n        if (validar < 1) setErrors({ ...errors, password: 'Debe tener al menos un número' });\r\n        else setErrors({ ...errors, password: '' });\r\n    }\r\n}\r\n\r\nexport default validation;"],"mappings":"AAAA,MAAMA,UAAU,GAAG,2CAA2C;AAE9D,MAAMC,UAAU,GAAGA,CAACC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,KAAK;EAChD,IAAI,CAACF,QAAQ,CAACG,KAAK,EAAED,SAAS,CAAC;IAAE,GAAGD,MAAM;IAAEE,KAAK,EAAE;EAA0B,CAAC,CAAC,CAAC,KAC3E,IAAIH,QAAQ,CAACG,KAAK,CAACC,MAAM,GAAG,EAAE,EAAEF,SAAS,CAAC;IAAE,GAAGD,MAAM;IAAEE,KAAK,EAAE;EAAqC,CAAC,CAAC,MACrG,IAAI,CAACL,UAAU,CAACO,IAAI,CAACL,QAAQ,CAACG,KAAK,CAAC,EAAED,SAAS,CAAC;IAAE,GAAGD,MAAM;IAAEE,KAAK,EAAE;EAAmB,CAAC,CAAC,CAAC,KAC1FD,SAAS,CAAC;IAAE,GAAGD,MAAM;IAAEE,KAAK,EAAE;EAAG,CAAC,CAAC;AAC5C,CAAC;AAED,IAAI,CAACH,QAAQ,CAACM,QAAQ,EAAEJ,SAAS,CAAC;EAAE,GAAGD,MAAM;EAAEK,QAAQ,EAAE;AAAsB,CAAC,CAAC,CAAC,KAC7E;EACD,IAAIN,QAAQ,CAACM,QAAQ,CAACF,MAAM,GAAG,CAAC,IAAIJ,QAAQ,CAACM,QAAQ,CAACF,MAAM,GAAG,EAAE,EAAEF,SAAS,CAAC;IAAE,GAAGD,MAAM;IAAEK,QAAQ,EAAE;EAAsB,CAAC,CAAC,CAAC,KACxH;IACD,IAAIC,OAAO,GAAG,CAAC;IACf,IAAIC,GAAG,GAAGR,QAAQ,CAACM,QAAQ,CAACG,KAAK,CAAC,EAAE,CAAC;IACrCD,GAAG,CAACE,OAAO,CAACC,IAAI,IAAI;MAChB,IAAI,CAACC,KAAK,CAACC,MAAM,CAACF,IAAI,CAAC,CAAC,EAAEJ,OAAO,EAAE;IACvC,CAAC,CAAC;IACF,IAAIA,OAAO,GAAG,CAAC,EAAEL,SAAS,CAAC;MAAE,GAAGD,MAAM;MAAEK,QAAQ,EAAE;IAAgC,CAAC,CAAC,CAAC,KAChFJ,SAAS,CAAC;MAAE,GAAGD,MAAM;MAAEK,QAAQ,EAAE;IAAG,CAAC,CAAC;EAC/C;AACJ;AAEA,eAAeP,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}