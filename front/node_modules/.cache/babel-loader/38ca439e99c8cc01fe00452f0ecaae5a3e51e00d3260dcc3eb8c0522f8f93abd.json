{"ast":null,"code":"const regexEmail = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{3}$/i;\nconst validation = userData => {\n  // let validar = 0;\n  // let arr = userData.password.split('')\n  // arr.forEach(char => {\n  //     if (!isNaN(Number(char))) validar++;\n  // });\n\n  // if (!userData.email) setErrors({ ...errors, email: 'Debes llenar este campo' });\n  // else if (userData.email.length > 35) setErrors({ ...errors, email: 'No puede superar los 35 caracteres' })\n  // else if (!regexEmail.test(userData.email)) setErrors({ ...errors, email: 'Email incorrecto' });\n  // else setErrors({ ...errors, email: '' });\n\n  // if (userData.password.length < 6 || userData.password.length > 10) setErrors({ ...errors, password: 'Password incorrecta' });\n  // // else if (validar < 1) setErrors({ ...errors, password: 'Debe tener al menos un número' });\n  // else if (!/\\d/.test(userData.password)) setErrors({ ...errors, password: 'Debe contener al menos un número' });\n  // else setErrors({ ...errors, password: '' });\n\n  const errors = {};\n  if (!userData.email) errors.email = '*Campo obligatorio';else if (userData.email.length > 35) errors.email = 'No se puede superar los 35 caracteres';else if (!regexEmail.test(userData.email)) errors.email = 'Email no válido';\n  if (!userData.password) errors.password = '*Campo obligatorio';else if (userData.password.length < 6 || userData.password.length > 10) errors.password = 'La password debe tener entre 6 y 10 caracteres';else if (!/\\d/.test(userData.password)) errors.password = 'Debe contener al menos un número';\n  return errors;\n};\nexport default validation;","map":{"version":3,"names":["regexEmail","validation","userData","errors","email","length","test","password"],"sources":["C:/Users/Y.A.S.C/OneDrive/Programación/INICIO-FULL/PI/rick_and_morty/src/validation.js"],"sourcesContent":["const regexEmail = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{3}$/i;\r\n\r\nconst validation = (userData) => {\r\n\r\n    // let validar = 0;\r\n    // let arr = userData.password.split('')\r\n    // arr.forEach(char => {\r\n    //     if (!isNaN(Number(char))) validar++;\r\n    // });\r\n\r\n    // if (!userData.email) setErrors({ ...errors, email: 'Debes llenar este campo' });\r\n    // else if (userData.email.length > 35) setErrors({ ...errors, email: 'No puede superar los 35 caracteres' })\r\n    // else if (!regexEmail.test(userData.email)) setErrors({ ...errors, email: 'Email incorrecto' });\r\n    // else setErrors({ ...errors, email: '' });\r\n\r\n    // if (userData.password.length < 6 || userData.password.length > 10) setErrors({ ...errors, password: 'Password incorrecta' });\r\n    // // else if (validar < 1) setErrors({ ...errors, password: 'Debe tener al menos un número' });\r\n    // else if (!/\\d/.test(userData.password)) setErrors({ ...errors, password: 'Debe contener al menos un número' });\r\n    // else setErrors({ ...errors, password: '' });\r\n\r\n    const errors = {};\r\n\r\n    if(!userData.email) errors.email = '*Campo obligatorio';\r\n    else if(userData.email.length > 35) errors.email = 'No se puede superar los 35 caracteres';\r\n    else if(!regexEmail.test(userData.email)) errors.email = 'Email no válido';\r\n\r\n    if(!userData.password) errors.password = '*Campo obligatorio';\r\n    else if (userData.password.length < 6 || userData.password.length > 10) errors.password = 'La password debe tener entre 6 y 10 caracteres';\r\n    else if (!/\\d/.test(userData.password)) errors.password = 'Debe contener al menos un número';\r\n    \r\n    return errors;\r\n}\r\n\r\nexport default validation;"],"mappings":"AAAA,MAAMA,UAAU,GAAG,yCAAyC;AAE5D,MAAMC,UAAU,GAAIC,QAAQ,IAAK;EAE7B;EACA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA;EACA;EACA;EACA;;EAEA,MAAMC,MAAM,GAAG,CAAC,CAAC;EAEjB,IAAG,CAACD,QAAQ,CAACE,KAAK,EAAED,MAAM,CAACC,KAAK,GAAG,oBAAoB,CAAC,KACnD,IAAGF,QAAQ,CAACE,KAAK,CAACC,MAAM,GAAG,EAAE,EAAEF,MAAM,CAACC,KAAK,GAAG,uCAAuC,CAAC,KACtF,IAAG,CAACJ,UAAU,CAACM,IAAI,CAACJ,QAAQ,CAACE,KAAK,CAAC,EAAED,MAAM,CAACC,KAAK,GAAG,iBAAiB;EAE1E,IAAG,CAACF,QAAQ,CAACK,QAAQ,EAAEJ,MAAM,CAACI,QAAQ,GAAG,oBAAoB,CAAC,KACzD,IAAIL,QAAQ,CAACK,QAAQ,CAACF,MAAM,GAAG,CAAC,IAAIH,QAAQ,CAACK,QAAQ,CAACF,MAAM,GAAG,EAAE,EAAEF,MAAM,CAACI,QAAQ,GAAG,gDAAgD,CAAC,KACtI,IAAI,CAAC,IAAI,CAACD,IAAI,CAACJ,QAAQ,CAACK,QAAQ,CAAC,EAAEJ,MAAM,CAACI,QAAQ,GAAG,kCAAkC;EAE5F,OAAOJ,MAAM;AACjB,CAAC;AAED,eAAeF,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}