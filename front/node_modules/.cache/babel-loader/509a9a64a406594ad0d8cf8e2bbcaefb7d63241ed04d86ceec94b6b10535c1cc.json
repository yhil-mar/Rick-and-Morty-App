{"ast":null,"code":"const regexEmail = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{3}$/i;\nconst validation = (userData, errors, setErrors) => {\n  if (!userData.email) setErrors({\n    ...errors,\n    email: 'Email vacío'\n  });else {\n    if (userData.email.length > 35) setErrors({\n      ...errors,\n      email: 'Email muy largo'\n    });else {\n      if (!regexEmail.test(userData.email)) setErrors({\n        ...errors,\n        email: 'Email incorrecto'\n      });else setErrors({\n        ...errors,\n        email: ''\n      });\n    }\n  }\n  if (!userData.password) setErrors({\n    ...errors,\n    password: 'Password incorrecta'\n  });else {\n    if (userData.password.length < 6 && userData.password.length > 10) setErrors({\n      ...errors,\n      password: 'Password incorrecta'\n    });\n    let validar = 0;\n    let arr = userData.password.split('');\n    arr.forEach(char => {\n      if (!isNaN(Number(char))) validar++;\n    });\n    console.log(validar);\n    if (validar > 1) setErrors({\n      ...errors,\n      password: 'Password incorrecta'\n    });\n  }\n};\nexport default validation;","map":{"version":3,"names":["regexEmail","validation","userData","errors","setErrors","email","length","test","password","validar","arr","split","forEach","char","isNaN","Number","console","log"],"sources":["C:/Users/Y.A.S.C/OneDrive/Programación/INICIO-FULL/PI/rick_and_morty/src/validation.js"],"sourcesContent":["const regexEmail = /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{3}$/i;\r\n\r\nconst validation = (userData, errors, setErrors) => {\r\n    if(!userData.email) setErrors({...errors, email: 'Email vacío'});\r\n    else {\r\n        if(userData.email.length > 35) setErrors({...errors, email: 'Email muy largo'});\r\n        else {\r\n            if(!regexEmail.test(userData.email)) setErrors({...errors, email: 'Email incorrecto'})\r\n            else setErrors({...errors, email: ''});\r\n        }\r\n    }\r\n\r\n    if(!userData.password) setErrors({...errors, password: 'Password incorrecta'});\r\n    else {\r\n        if(userData.password.length < 6 && userData.password.length > 10) setErrors({...errors, password: 'Password incorrecta'});\r\n        let validar = 0;\r\n        let arr = userData.password.split('')\r\n        arr.forEach(char => {\r\n            if(!isNaN(Number(char))) validar++;\r\n        });\r\n        console.log(validar);\r\n        if(validar > 1) setErrors({...errors, password: 'Password incorrecta'});\r\n    }\r\n};\r\n\r\nexport default validation;"],"mappings":"AAAA,MAAMA,UAAU,GAAG,yCAAyC;AAE5D,MAAMC,UAAU,GAAGA,CAACC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,KAAK;EAChD,IAAG,CAACF,QAAQ,CAACG,KAAK,EAAED,SAAS,CAAC;IAAC,GAAGD,MAAM;IAAEE,KAAK,EAAE;EAAa,CAAC,CAAC,CAAC,KAC5D;IACD,IAAGH,QAAQ,CAACG,KAAK,CAACC,MAAM,GAAG,EAAE,EAAEF,SAAS,CAAC;MAAC,GAAGD,MAAM;MAAEE,KAAK,EAAE;IAAiB,CAAC,CAAC,CAAC,KAC3E;MACD,IAAG,CAACL,UAAU,CAACO,IAAI,CAACL,QAAQ,CAACG,KAAK,CAAC,EAAED,SAAS,CAAC;QAAC,GAAGD,MAAM;QAAEE,KAAK,EAAE;MAAkB,CAAC,CAAC,MACjFD,SAAS,CAAC;QAAC,GAAGD,MAAM;QAAEE,KAAK,EAAE;MAAE,CAAC,CAAC;IAC1C;EACJ;EAEA,IAAG,CAACH,QAAQ,CAACM,QAAQ,EAAEJ,SAAS,CAAC;IAAC,GAAGD,MAAM;IAAEK,QAAQ,EAAE;EAAqB,CAAC,CAAC,CAAC,KAC1E;IACD,IAAGN,QAAQ,CAACM,QAAQ,CAACF,MAAM,GAAG,CAAC,IAAIJ,QAAQ,CAACM,QAAQ,CAACF,MAAM,GAAG,EAAE,EAAEF,SAAS,CAAC;MAAC,GAAGD,MAAM;MAAEK,QAAQ,EAAE;IAAqB,CAAC,CAAC;IACzH,IAAIC,OAAO,GAAG,CAAC;IACf,IAAIC,GAAG,GAAGR,QAAQ,CAACM,QAAQ,CAACG,KAAK,CAAC,EAAE,CAAC;IACrCD,GAAG,CAACE,OAAO,CAACC,IAAI,IAAI;MAChB,IAAG,CAACC,KAAK,CAACC,MAAM,CAACF,IAAI,CAAC,CAAC,EAAEJ,OAAO,EAAE;IACtC,CAAC,CAAC;IACFO,OAAO,CAACC,GAAG,CAACR,OAAO,CAAC;IACpB,IAAGA,OAAO,GAAG,CAAC,EAAEL,SAAS,CAAC;MAAC,GAAGD,MAAM;MAAEK,QAAQ,EAAE;IAAqB,CAAC,CAAC;EAC3E;AACJ,CAAC;AAED,eAAeP,UAAU"},"metadata":{},"sourceType":"module","externalDependencies":[]}